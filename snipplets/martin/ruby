{"nombre":"ruby","snipplets":[{"contenido":"print \"como es tu nombre?\"\nnombre = gets.chomp\nprint \"como es tu apellido\"\napellido = gets.chomp\nprint \"cual es tu ciudad?\"\nstate = gets.chomp\nprint \"quin so?\"\nso =gets.chomp\n\n\n\nputs \"mi nombre es #{nombre} y mi appelido es #{apellido} y mi ciudad es #{state} y so es #{so}\"\n","titulo":"interpolacion de strings"},{"contenido":"#con dos puntos  llega a 10 y con tres puntos no llega a 10\n\n\tfor num in 0..10\n\t\tputs num\n\tend\n\n","titulo":"for con puntos"},{"contenido":"i = 20\nloop do\n  i -= 1\n  print \"#{i}\"\n  break if i <= 0\nend","titulo":"loop"},{"contenido":"Sirve para no hacer ciertos loops en este caso no imprime los\nnumeros pares\n\nfor i in 1..5\n  next if i % 2 == 0\n  print i\nend\n","titulo":"next!"},{"contenido":"print \"Thtring, pleathe!: \"\nuser_input = gets.chomp\nuser_input.downcase!\n\nif user_input.include? \"s\"\n  user_input.gsub!(\/s\/, \"th\")\nelse\n  puts \"Nothing to do here!\"\nend\n  \nputs \"Your string is: #{user_input}\"\n\n\noutput\nThtring, pleathe!:  nose\nYour string is: nothe\nnil","titulo":"reemplazo de strings"},{"contenido":"print \"inputea algo\"\nuser_input = gets.chomp\nuser_input.downcase!\nif user_input.include? \"s\"\n    print \"tiene una ese\"\nelse\n    print \"no tiene una ese\"\nend","titulo":".include?"},{"contenido":"print \"inputea algo\"\n user_input = gets.chomp\n user_input.downcase!\n user_input.gsub!(\/s\/,\"th\")\n","titulo":"reemplazar dentro de un string"},{"contenido":"my_hash = { \"name\" => \"Eric\",\n  \"age\" => 26,\n  \"hungry?\" => true\n}","titulo":"hash"},{"contenido":"friends = [\"Milhouse\", \"Ralph\", \"Nelson\", \"Otto\"]\n\nfamily = { \"Homer\" => \"dad\",\n  \"Marge\" => \"mom\",\n  \"Lisa\" => \"sister\",\n  \"Maggie\" => \"sister\",\n  \"Abe\" => \"grandpa\",\n  \"Santa's Little Helper\" => \"dog\"\n}\n\nfriends.each { |x| puts \"#{x}\" }\nfamily.each { |x, y| puts \"#{x}: #{y}\" }\n\n\n\/\/ mas claro iterar sobre hash\nsecret_identities = {\n  \"The Batman\" => \"Bruce Wayne\",\n  \"Superman\" => \"Clark Kent\",\n  \"Wonder Woman\" => \"Diana Prince\",\n  \"Freakazoid\" => \"Dexter Douglas\"\n}\n  \nsecret_identities.each{\n    |nombre,identidad|\n    puts \"el nombre es #{nombre} y su identidad es #{identidad}\"\n    \n    \n    }\n","titulo":"iterar en un hash"},{"contenido":"def what_up(greeting, *bros)\n  bros.each { |bro| puts \"#{greeting}, #{bro}!\" }\nend\n \nwhat_up(\"What up\", \"Justin\", \"Ben\", \"Kevin Sorbo\")","titulo":"enviar una cantidad x de variables"},{"contenido":"books = [\"Charlie and the Chocolate Factory\", \"War and Peace\", \"Utopia\", \"A Brief History of Time\", \"A Wrinkle in Time\"]\n\n# To sort our books in ascending order, in-place\nbooks.sort! { |firstBook, secondBook| firstBook <=> secondBook }\n\n# Sort your books in descending order, in-place below\n#este ordena al revez\nbooks.sort! {|first,second|\n second <=> first\n\n}\n\n#otro sort\nfruits = [\"orange\", \"apple\", \"banana\", \"pear\", \"grapes\"]\n\nfruits.sort! do |first,second|\nsecond <=> first\nend","titulo":"sort \/\/ ordenamiento"},{"contenido":"puts \"Ingresate un testo\"\ntext = gets.chomp\nputs \"ingresa una redasion\"\nredact = gets.chomp\n\nwords = text.split(\" \")\n\nwords.each{\n    |palabras|\n    \n    if palabras == redact\n        print \"REDACTED \"\n    else\n        print  palabras + \" \"\n    \nend\n    \n    }","titulo":"split"},{"contenido":"puts \"ingresa un texto que tenga alguna palabra repetida\"\ntext =gets.chomp\n\nwords = text.split(\" \")\n\nfrequencies = Hash.new(0)\n\nwords.each{\n    |palabras|\n    \n    frequencies[palabras] +=1 \n    \n    }","titulo":"palabras repetidas"},{"contenido":"puts \"ingresa un texto que tenga alguna palabra repetida\"\ntext =gets.chomp\n\nwords = text.split(\" \")\n\nfrequencies = Hash.new(0)\n\nwords.each{\n    |palabras|\n    \n    frequencies[palabras] +=1 \n    \n    }\n    \n    \n    frequencies = frequencies.sort_by do\n        |palabra , repeticion|\n        repeticion\n    end\n        \n        \n        frequencies.reverse!\n        \n        frequencies.each do |palabra,repeticion|\n            puts palabra + \" \" + repeticion.to_s\n        end","titulo":"sort avanzado  \/\/ convertir un integer a string .to_s"},{"contenido":"#en vez de nil devuelve el string\nno_nil_hash = Hash.new(\"Trady Blix\")\n","titulo":"cambiar el nombre de nil en un hash"},{"contenido":"#vienen a ser tipo cosas estaticas tipo strings que siempre son \n#estaticos o cosas asi no me sale el nombre\nstrings = [\"HTML\", \"CSS\", \"JavaScript\", \"Python\", \"Ruby\"]\n\nsymbols= Array.new\nstrings.each{\n    |language|\n    \n    symbols.push(language.intern)\n#  symbols.push(language.to_sym)\n    \n}","titulo":"symbols"},{"contenido":"movie_ratings = {\n  memento: 3,\n  primer: 3.5,\n  the_matrix: 5,\n  truman_show: 4,\n  red_dawn: 1.5,\n  skyfall: 4,\n  alex_cross: 2,\n  uhf: 1,\n  lion_king: 3.5\n}\n# Add your code below!\ngood_movies = Hash.new\ngood_movies = movie_ratings.select{\n    |key,value|\n    value > 3\n    }\nputs good_movies\n\n\ngood_movies.each_key{\n|key|\nputs key\n\n}\n\ngood_movies.each_value{\n|val|\n\nputs val\n}","titulo":"seleccionar datos de un hash"},{"contenido":"case language\n  when \"JS\" then puts \"Websites!\"\n  when \"Python\" then puts \"Science!\"\n  when \"Ruby\" then puts \"Web apps!\"\n  else puts \"I don't know!\"\nend\n","titulo":"case"},{"contenido":"def a\n  puts \"A was evaluated!\"\n  return false\nend\n\ndef b\n  puts \"B was also evaluated!\"\n  return true\nend\n\nputs a || b\nputs \"------\"\nputs a && b","titulo":"Short-Circuit Evaluation"},{"contenido":"#para letras\n\"L\".upto(\"P\"){\n    |letter|\n    puts letter\n    }\n#para numeros\n95.upto(100) { |num| print num, \" \" }","titulo":"upto \/\/ downto"},{"contenido":"age = 26\n\n# Add your code below!\n\n[1,2,3].respond_to?(:to_sym)\n[1,2,3].respond_to?(:push)\n\npuede = age.respond_to?(:next)\n\nif puede\n    age = age.next\n    puts age\nend\n","titulo":"saber si un objeto responde a un metodo determinado"},{"contenido":"alphabet = [\"a\", \"b\", \"c\"]\nalphabet.push(\"d\") # Update me!\nalphabet << \"e\"\nputs alphabet\ncaption = \"A giraffe surrounded by \"\ncaption += \"weezards!\" # Me, too!\ncaption<< \"fuck u\"\nputs caption","titulo":"push abreviado"},{"contenido":"ruby_is_eloquent = true\nruby_is_ugly = false\n\nputs \"Ruby is eloquent!\" if ruby_is_eloquent\nputs \"Ruby's not ugly!\" unless ruby_is_ugly\n\ntrue ? \"hola mundo\" : \"chau mundo\"\nfalse ? \"hola mundo\" : \"chau mundo\"\n#esta funciona\nputs 1<2 ? \"One is less than two!\" : \"One is not less than two.\"","titulo":"otros if"},{"contenido":"favorite_book = nil\nputs favorite_book\n\nfavorite_book ||= \"Cat's Cradle\"\nputs favorite_book\n\nfavorite_book ||= \"Why's (Poignant) Guide to Ruby\"\nputs favorite_book\n\nfavorite_book = \"Why's (Poignant) Guide to Ruby\"\nputs favorite_book","titulo":"asignar valores solo si no tiene nada asignado la variable \/\/ conditional assignament"},{"contenido":"#devuelve el cuadrado del numero\ndef square (number)\n    number**2\nend\n\n","titulo":"implicit return"},{"contenido":"#repetir 3 veces\n3.times do\n  puts \"I'm a refactoring master!\"\nend\n\nnumbers = [1, 2, 3, 4, 5]\n\n# one way to loop\nnumbers.each { |item| puts item }\n\n# another way to loop\nnumbers.each do |item|\n  puts item\nend\n\n\/\/ otro tipo de each\n10.times {print \"bacon!\"}\n30.times{\nprint \"Ruby!\"\n}\n\n","titulo":"each"},{"contenido":"#esto puede cambiar por\nprime_array = [] if prime_array.nil?\n\n#lo creo si no esta creado\nprime_array ||= []","titulo":"ejemplo de conditional assignament"},{"contenido":"#itera sobre el array y me devuelve otro array con la operacion\n#entre llaves, si le pongo el ! lo hace en el mismo array\n\nfibs = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\n# Add your code below!\n\ndoubled_fibs=fibs.collect{\n    |numbers|\n    numbers +numbers\n    }","titulo":"collect"},{"contenido":"#imprime lo que paso por parametro en el yield\ndef block_test\n  puts \"We're in the method!\"\n  puts \"Yielding to the block...\"\n  yield  \n  puts \"We're back in the method!\"\n\nend\n\nblock_test { puts \">>> We're in the block!\" }\ndef yield_name(name)\n  puts \"In the method! Let's yield.\"\n  yield(\"Kim\")\n  puts \"In between the yields!\"\n  yield(name)\n  puts \"Block complete! Back in the method.\"\nend\n\nyield_name(\"Eric\") { |n| puts \"My name is #{n}.\" }\n\n# Now call the method with your name!\nyield_name(\"Martin\") {|n| puts \"My name is #{n}\"}","titulo":"yield"},{"contenido":"#ejemplo semi complejo de yield, puedo decirle al metodo\n#como debe comportarse\n\ndef double(name)\n  puts \"In the method! Let's yield.\"\n  puts name\n  puts \"lo multiplico por 2\"\n  yield(name)\nend\n\n\ndouble(2){|n| n*2}\n","titulo":"yield 2"},{"contenido":"multiples_of_3 = Proc.new do |n|\n  n % 3 == 0\nend\n\n(1..100).to_a.select(&multiples_of_3)\n\n# otro prc mas complejo , convierte todo en entero\nfloats = [1.2, 3.45, 0.91, 7.727, 11.42, 482.911]\n# Write your code below this line!\nround_down = Proc.new{\n|x|\nx.to_i\n    }\n# Write your code above this line!\nints = floats.collect(&round_down)\n\n# un ejemplo todavia mas complejo\n# Here at the amusement park, you have to be four feet tall\n# or taller to ride the roller coaster. Let's use .select on\n# each group to get only the ones four feet tall or taller.\n\ngroup_1 = [4.1, 5.5, 3.2, 3.3, 6.1, 3.9, 4.7]\ngroup_2 = [7.0, 3.8, 6.2, 6.1, 4.4, 4.9, 3.0]\ngroup_3 = [5.5, 5.1, 3.9, 4.3, 4.9, 3.2, 3.2]\n\n# Complete this as a new Proc\nover_4_feet =Proc.new{\n    |height|\n    #implicit return\n    height >=4\n    \n    }\n\n# Change these three so that they use your new over_4_feet Proc\ngroup_1.collect(&over_4_feet)\n\n#can_ride_1 = group_1.select { |height| height >= 4 }\n#can_ride_2 = group_2.select { |height| height >= 4 }\n#can_ride_3 = group_3.select { |height| height >= 4 }","titulo":"procs"},{"contenido":"def greeter\n    puts \"between this\"\n    yield\nend\n\n\n\nphrase = Proc.new{\n    puts \"Hello there!\"\n    \n    }\n    \n    greeter(&phrase)","titulo":"procs \/\/ yield"},{"contenido":"# se puede llamar a un proc, solo poniendo .call\nhi = Proc.new {\n    puts \"Hello!\"\n    }\n    \n hi.call","titulo":"mas procs"},{"contenido":"def lambda_demo(a_lambda)\n  puts \"I'm the method!\"\n  a_lambda.call\nend\n\nlambda_demo(lambda { puts \"I'm the lambda!\" })\n\n# otro ejemplo\n\nstrings = [\"leonardo\", \"donatello\", \"raphael\", \"michaelangelo\"]\n# Write your code below this line!\n\nsymbolize =lambda {|x| x.to_sym}\n\n# Write your code above this line!\nsymbols = strings.collect(&symbolize)","titulo":"lambda"},{"contenido":"#convierte el array de numeros a un array de symbolos string\nnumbers_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nstrings_array = numbers_array.collect(&:to_s)","titulo":"conversiones a symbols"},{"contenido":"def batman_ironman_proc\n  victor = Proc.new { return \"Batman will win!\" }\n  victor.call\n  \"Iron Man will win!\"\nend\n\nputs batman_ironman_proc\n\ndef batman_ironman_lambda\n  victor = lambda { return \"Batman will win!\" }\n  victor.call\n  \"Iron Man will win!\"\nend\n\nputs batman_ironman_lambda","titulo":"ejercicios proc"},{"contenido":"ages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]\n\n# Add your code below!\n\nunder_100 = Proc.new{\n    |x|\n    puts \"#{x} es menor de 100\" if x >100\n    \n    }\n    \n    youngsters = ages.select(&under_100)\n    ","titulo":"ejercicios procs"},{"contenido":"LAMBDA OBEDECE PARAMETROS PROCS NO!\n\nClick Save & Submit Code to see the return values. \nSee how the proc says Batman will win? This is because it \nreturns immediately, without going back to the \nbatman_ironman_proc method.\n\nOur lambda, however, goes back into the method \nafter being called, so the method returns the last code \nit evaluates: \"Iron Man will win!\"\n\ndef batman_ironman_proc\n  victor = Proc.new { return \"Batman will win!\" }\n  victor.call\n  \"Iron Man will win!\"\nend\n\nputs batman_ironman_proc\n\ndef batman_ironman_lambda\n  victor = lambda { return \"Batman will win!\" }\n  victor.call\n  \"Iron Man will win!\"\nend\n\nputs batman_ironman_lambda","titulo":"procs lambda ?"}],"tags":null}